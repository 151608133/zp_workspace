<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zp.sys.dao.RoleMapper">

  <select id="getRoleId" resultType="int">
  	SELECT max(role_id) as roleId FROM t_role
  </select>
  
  <select id="getRole" parameterType="map" resultType="Role">
    SELECT
    	role_id as roleId,
    	role_name as roleName,
   		description
   		
    FROM t_role
    <where>
    	<if test="id != null">
    		role_id = #{id}
    	</if>
    	<if test="roleName != null">
    		AND role_name = #{roleName}
    	</if>
    	<if test="stateCd != null">
    		AND state_cd = #{stateCd}
    	</if>
    	<if test="description != null">
    		AND description = #{description}
    	</if>
    </where>
  </select>

  <select id="getRoleList" resultType="Role">
    SELECT
    	t.role_id as roleId,
    	t.role_name as roleName,
    	t.create_date as createDate,
    	t.description ,
    	(select count(1) from t_user_role a where a.role_id=t.role_id) as userCount 
    FROM t_role t where t.state_cd='00A' ORDER BY t.createDate DESC
  </select>
  
  <select id="getRolelistPage" parameterType="int" resultType="Role">
    	SELECT
    	t.role_id as roleId,
    	t.role_name as roleName,
    	t.create_date as createDate,
    	<!-- (select type_name from t_user_type u where u.type_id = t.roleType) as roleType, -->
    	t.description ,
    	(select count(1) from t_user_role a where a.role_id=t.role_id) as userCount 
    	FROM t_role t 
        <where>
        t.state_cd='00A'
    	<if test="roleName != null  ">
    		and role_name like '%${roleName}%'
    	</if>
    </where> 
    ORDER BY create_date DESC
  </select>
  
  <select id="getRoleMenuList" resultMap="roleResult">
    SELECT
    	r.role_id as role_id,
    	r.role_name as role_name,
   		r.description as role_description,
    	m.menu_id as menu_id,
    	m.menu_name as menu_name
    FROM t_role r
    LEFT JOIN t_menu_role mr ON(r.role_id=mr.role_id)
    LEFT JOIN t_menu m ON(m.menu_id=mr.menu_id)
  </select>
  
  <resultMap id="roleResult"  type="Role"> 
		<id property="roleId"  column="role_id" />
		<result property="roleName" column="role_name"/>
		<result property="description" column="role_description"/>
		<result property="createDate" column="create_date"/>
		<collection property="funcs"  ofType="Function"> 
			<id property="funcId"  column="func_id"/> 
			<result property="funcName"  column="func_name"/>
		</collection> 
  </resultMap>
  
  <insert id="insertRole" parameterType="Role" >
  	INSERT INTO t_role (role_id,role_name,description)
    VALUES (#{roleId},#{roleName}, #{description})
  </insert>
  
  <insert id="insertRoleMenu" parameterType="map">
  	INSERT INTO t_menu_role (menu_id,role_id)
    VALUES (#{menu_id}, #{role_id})
  </insert>
  
  <update id="updateRole"  parameterType="Role"> 
	UPDATE t_role
	<set> 
		<if test="roleName != null">role_name=#{roleName},</if>
		<if test="description != null">description=#{description}</if>
	</set>
	WHERE role_id=#{roleId}
  </update>
  
  <update id="updateRoleMenu"  parameterType="map"> 
	UPDATE t_menu_role SET
	menu_id=#{menu_id}
	WHERE role_id=#{role_id}
  </update>
  
  <update id="deleteRoleById"  parameterType="map">
  	UPDATE  t_role set 
  	state_cd='00X'
  	WHERE role_id=#{roleId}
  </update>
  <delete id="deletFuncById" parameterType="map">
  DELETE FROM t_func_role WHERE role_id=#{roleId}
  </delete>
  <delete id="deleteRoleMenu"  parameterType="map">
  	DELETE FROM t_menu_role WHERE role_id=#{roleId}
  </delete>
  <insert id="addRole" parameterType="Role">
  	<selectKey resultType="int" order="BEFORE" keyProperty="roleId">  
       SELECT ROLE_SEQ.Nextval as roleId from DUAL  
   </selectKey>
  	INSERT INTO t_role (role_id,role_name,create_date,description,state_cd)
    VALUES (#{roleId},#{roleName},sysdate, #{description},#{stateCd})
  </insert>
  	<select id="getRoleById" parameterType="int" resultMap="roleById">
		select role_id,role_name,description from t_role  where role_id = #{roleId}
	</select>
	
	<resultMap id="roleById"  type="Role"> 
		<id property="roleId"  column="role_id" />
		<result property="roleName" column="role_name"/>
		<result property="description" column="description"/>
  </resultMap>
   <update id="saveRole"  parameterType="Role"> 
	UPDATE t_role SET	
	role_name=#{roleName},
	description=#{description}
	WHERE role_id=#{roleId}
  </update>
  <delete id="deletefunc" parameterType="Role">
  	DELETE FROM t_func_role WHERE role_id=#{roleId}
  </delete>
   <select id="getRoleListByUserForAdmin" parameterType="java.lang.Long" resultType="Role">
	  	 SELECT
		DISTINCT
		r.role_id AS roleId,
		r.role_name AS roleName
	FROM
		t_role r
	WHERE
		 r.state_cd = '00A'
		<!-- ORDER BY r.role_id=9 desc  -->
  </select>
  <select id="getRoleListByUser" parameterType="java.lang.Long" resultType="Role">
	  	 SELECT
		DISTINCT
		r.role_id AS roleId,
		r.role_name AS roleName
	FROM
		t_role r,
		t_user u,
		t_user_role a
	WHERE
		r.role_id = NVL2(
	(SELECT 1 from t_user u1,t_role r1,t_user_role a1 where r1.role_id =a1.role_id
	AND a1.user_id = u1.user_id AND u1.user_id = ${_parameter} AND r1.state_cd = '00A' AND r1.role_name like '%管理员%'),a.role_id,r.role_id)
	AND a.user_id = u.user_id
	AND r.role_id = a.role_id
	AND u.user_id = ${_parameter}
	AND r.state_cd = '00A'
	<!-- ORDER BY r.role_id=9 desc --> 
  </select>
  <!-- <select id="getRoleByRoleType" parameterType="map" resultType="Role">
   SELECT
		DISTINCT
		r.role_id AS roleId,
		r.role_name AS roleName
	FROM t_role r 
	where r.roleType in (${roleType}) and r.state_cd = '00A'
  </select> -->
  <select id="getOrderList" resultType="Function">
SELECT func_id as funcId,description,parent_func_id as parentFuncId FROM t_function
where parent_func_id is NOT NULL
  </select>
    <select id="getGoodsList" resultType="Function">
  	SELECT func_id as funcId,description FROM t_function
	where parent_func_id=2
  </select>
  <insert id="addFunction"  parameterType="List">
  INSERT ALL
     <foreach collection="list" item="func" index="index" separator=" " > 
     INTO t_func_role (func_id,role_id)
    VALUES 
    (#{func.funcId},#{func.roleId})
    </foreach> 
    select * from dual
  </insert>
<select id="getCheckedList" parameterType="map" resultType="Function">
SELECT t.parent_func_id||'_'||f.func_id as funcName FROM t_function t,t_func_role f
WHERE t.func_id=f.func_id AND f.role_id=#{roleId} AND t.parent_func_id IS NOT NULL 
</select>

<select id="getMainFuncList"  resultType="ParamFunction">
    SELECT
    	f.func_id as funcId,
    	f.func_name as funcName,
    	f.parent_func_id as parentFuncId
    FROM t_function f WHERE f.type='1' AND f.parent_func_id IS  NULL OR f.parent_func_id=f.func_id
    ORDER BY f.func_id
  </select>

<select id="getMainMenuList" parameterType="int" resultType="Function">
	SELECT 
    	f.func_id as funcId,
    	f.func_name as funcName,
    	f.parent_func_id as parentFuncId
    FROM t_function f
	WHERE  f.parent_func_id=#{id} AND f.type = '1' 
	ORDER BY  f.func_id
  </select>
  
  <select id="getSubFuncList" parameterType="int" resultType="Function">
	SELECT 
    	f.func_id as funcId,
    	f.func_name as funcName,
    	f.parent_func_id as parentFuncId
    FROM t_function f
	WHERE  f.parent_func_id=#{id} AND f.type = '0' 
	ORDER BY  f.func_id
  </select>
  <select id="userIdQueryFunctionId" parameterType="String" resultType="Integer">
  	select DISTINCT t2.func_id from t_user_role t1 ,t_func_role t2 where t1.user_id=#{user_id} and t1.role_id=t2.role_id
  </select>
  	
  <select id="getnoRoleByRoleType" parameterType="map" resultType="Function">
	SELECT * FROM (
	select c.parent_func_id|| '_'|| c.func_id as funcName from t_function c 
	where not exists(SELECT 1 FROM t_func_role a,t_role b WHERE b.role_id = a.role_id and a.func_id = c.func_id )) e WHERE e.funcName IS NOT null
  </select>
  
  <select id="getRoleListByroleType" parameterType="map" resultType="Role">
    SELECT 
    	t.role_id as roleId,
    	t.role_name as roleName
    FROM t_role t where t.state_cd='00A' ORDER BY t.role_name DESC
  </select>
  
  <select id="getRole2listPage" parameterType="Role" resultType="Role">
  	SELECT
    	t.role_id as roleId,
    	t.role_name as roleName,
    	t.create_date as createDate,
    	t.description ,
    	(select count(1) from t_user_role a where a.role_id=t.role_id) as userCount 
    FROM t_role t where t.state_cd='00A' ORDER BY t.role_name DESC
  </select>
  
  <select id="getRoleListByUserId" parameterType="map" resultType="Role">
  	select b.role_id as roleId,
    	b.role_name as roleName 
    FROM t_role b WHERE b.status = '00A' 
  </select>
</mapper>